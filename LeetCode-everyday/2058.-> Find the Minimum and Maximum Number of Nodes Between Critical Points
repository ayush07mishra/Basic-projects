/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    vector<int> nodesBetweenCriticalPoints(ListNode* head) {
        vector<int>arr;
        vector<int> res;
        vector<int>ans;
        ListNode* temp=head;

        while(temp){
            arr.push_back(temp->val);
            temp=temp->next;
        }

        for(int i=1;i<arr.size()-1;i++){
            if(arr[i-1]<arr[i]&&arr[i]>arr[i+1]){
                ans.push_back(i+1);
            }
            if(arr[i-1]>arr[i]&&arr[i]<arr[i+1]){
                 ans.push_back(i+1);
            }
        }
    if (ans.size() >= 2) {
            int minDist = INT_MAX;
            int maxDist = ans.back() - ans.front();

            for (int i = 1; i < ans.size(); i++) {
                int dist = ans[i] - ans[i - 1];
                if (dist < minDist) {
                    minDist = dist;
                }
            }

            res.push_back(minDist);
            res.push_back(maxDist);
        } else {
            res.push_back(-1);
            res.push_back(-1);
        }
        
        
        return res;
        
    }
};
