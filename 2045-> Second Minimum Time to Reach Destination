class Solution {
public:
    int secondMinimum(int n, vector<vector<int>>& edges, int time, int change) {
        vector<vector<int>>adj(n+1);
        vector<int>edge(2);
        for(auto edge:edges )
        {
            adj[edge[0]].push_back(edge[1]);
            adj[edge[1]].push_back(edge[0]);
        }
        queue<pair<int,int>>q;
        vector<int>first(n+1,INT_MAX);
        vector<int>second(n+1,INT_MAX);
        q.push({0,1});
        first[1]=0;
        while(!q.empty())
        {
            
            int node=q.front().second;
            int curr_time=q.front().first;
            q.pop();
            int New_time=curr_time;
      if((curr_time/change)%2==1)   //when odd hai tab red line wait karna padega jab tak green naa ho jaye
            {
                New_time+=(change-(curr_time%change));
            } 
            New_time+=time;
            for(auto x:adj[node])
            {   if(New_time<first[x])
                  {
                    second[x]=first[x];
                    first[x]=New_time;
                    q.push({New_time,x});
                  }
                  else if(New_time>first[x]&&New_time<second[x])
                    {
                        second[x]=New_time;
                        q.push({New_time,x});
                    }
            }
      
        }
        return second[n];
    }
};
